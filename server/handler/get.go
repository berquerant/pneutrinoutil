package handler

import (
	"log/slog"
	"net/http"
	"path/filepath"
	"time"

	"github.com/berquerant/pneutrinoutil/pkg/echox"
	"github.com/berquerant/pneutrinoutil/pkg/logx"
	"github.com/berquerant/pneutrinoutil/server/alog"
	"github.com/berquerant/pneutrinoutil/server/pworker"
	"github.com/labstack/echo/v4"
)

func NewGet(list *pworker.List, logDir string) *Get {
	return &Get{
		list:   list,
		logDir: logDir,
	}
}

type GetParam struct {
	RequestID string `param:"id" validate:"required"`
}

type Get struct {
	list   *pworker.List
	logDir string
}

func (*Get) bind(c echo.Context) (*GetParam, *StatusError) {
	var p GetParam
	if err := c.Bind(&p); err != nil {
		return nil, NewStatusError(http.StatusBadRequest, err, "bad request")
	}
	return &p, nil
}

func (g *Get) withResult(
	f func(echo.Context, pworker.Result) error,
) func(echo.Context) error {
	return func(c echo.Context) error {
		p, bErr := g.bind(c)
		if bErr != nil {
			return bErr.Respond(c)
		}
		r, err := g.list.Load(p.RequestID)
		if err != nil {
			alog.L().Error("missing",
				slog.String("id", echox.RequestID(c)),
				slog.String("param_id", p.RequestID),
				logx.Err(err),
			)
			return Error(c, http.StatusNotFound, "not found")
		}
		return f(c, r)
	}
}

func (g *Get) withSuccessfulResult(
	f func(echo.Context, pworker.Result) error,
) func(echo.Context) error {
	return g.withResult(func(c echo.Context, r pworker.Result) error {
		if err := r.Err(); err != nil {
			alog.L().Error("missing due to failure",
				slog.String("id", echox.RequestID(c)),
				slog.String("param_id", r.RequestID()),
				logx.Err(err),
			)
			return Error(c, http.StatusNotFound, "not found due to failure")
		}
		return f(c, r)
	})
}

type GetDetailResponseData struct {
	RequestID string `json:"rid"`                // request id, or just id
	Basename  string `json:"basename,omitempty"` // original musicxml file name except extension
	CreatedAt string `json:"created_at,omitempty"`
	Salt      int    `json:"salt,omitempty"`
	Err       string `json:"error,omitempty"`
}

// Get process info.
//
// @summary get process info
// @description get process info
// @param id path string true "request id"
// @produce json
// @success 200 {object} handler.SuccessResponse[GetDetailResponseData]
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/detail [get]
func (g *Get) Detail(c echo.Context) error {
	return g.withResult(func(c echo.Context, r pworker.Result) error {
		if err := r.Err(); err != nil {
			return Success(c, http.StatusOK, GetDetailResponseData{
				RequestID: r.RequestID(),
				Err:       err.Error(),
			})
		}
		return Success(c, http.StatusOK, GetDetailResponseData{
			RequestID: r.RequestID(),
			Basename:  r.Element().Basename,
			CreatedAt: r.Element().Now.Format(time.DateTime),
			Salt:      r.Element().Salt,
		})
	})(c)
}

// Download process log.
//
// @summary download log
// @description download process log file
// @param id path string true "request id"
// @success 200 {string} file
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/log [get]
func (g *Get) Log(c echo.Context) error {
	return g.withResult(func(c echo.Context, r pworker.Result) error {
		return c.File(filepath.Join(g.logDir, r.RequestID()))
	})(c)
}

// Download pneutrinoutil config file.
//
// @summary download config
// @description download pneutrinoutil config as json
// @param id path string true "request id"
// @produce json
// @success 200 {object} handler.SuccessResponse[ctl.Config]
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/config [get]
func (g *Get) Config(c echo.Context) error {
	return g.withSuccessfulResult(func(c echo.Context, r pworker.Result) error {
		return Success(c, http.StatusOK, r.Config())
	})(c)
}

// Download musicxml.
//
// @summary download musicxml
// @description download musicxml file
// @param id path string true "request id"
// @success 200 {string} file
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/musicxml [get]
func (g *Get) MusicXML(c echo.Context) error {
	return g.withSuccessfulResult(func(c echo.Context, r pworker.Result) error {
		return c.File(filepath.Join(r.Dir(), r.Element().Basename+".musicxml"))
	})(c)
}

// Download wav file generated by pneutrinoutil.
//
// @summary download wav
// @description download wav file generated by pneutrinoutil
// @param id path string true "request id"
// @success 200 {string} file
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/wav [get]
func (g *Get) Wav(c echo.Context) error {
	return g.withSuccessfulResult(func(c echo.Context, r pworker.Result) error {
		return c.File(filepath.Join(r.Dir(), r.Element().Basename+".wav"))
	})(c)
}

// Download world wav file generated by pneutrinoutil.
//
// @summary download world wav
// @description download world wav file generated by pneutrinoutil
// @param id path string true "request id"
// @success 200 {string} file
// @failure 404 {object} handler.ErrorResponse
// @router /proc/{id}/world_wav [get]
func (g *Get) WorldWav(c echo.Context) error {
	return g.withSuccessfulResult(func(c echo.Context, r pworker.Result) error {
		return c.File(filepath.Join(r.Dir(), r.Element().Basename+"_world.wav"))
	})(c)
}
